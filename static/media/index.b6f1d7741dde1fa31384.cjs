"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var __defProp=Object.defineProperty,__name=(e,t)=>__defProp(e,"name",{value:t,configurable:!0}),_helpers=require("@turf/helpers"),_sweeplineintersections=require("sweepline-intersections"),_sweeplineintersections2=_interopRequireDefault(_sweeplineintersections),sweeplineIntersections=_sweeplineintersections2.default;function lineIntersect(e,t,n={}){const{removeDuplicates:i=!0,ignoreSelfIntersections:r=!1}=n;let l=[];"FeatureCollection"===e.type?l=l.concat(e.features):"Feature"===e.type?l.push(e):"LineString"!==e.type&&"Polygon"!==e.type&&"MultiLineString"!==e.type&&"MultiPolygon"!==e.type||l.push(_helpers.feature.call(void 0,e)),"FeatureCollection"===t.type?l=l.concat(t.features):"Feature"===t.type?l.push(t):"LineString"!==t.type&&"Polygon"!==t.type&&"MultiLineString"!==t.type&&"MultiPolygon"!==t.type||l.push(_helpers.feature.call(void 0,t));const s=sweeplineIntersections(_helpers.featureCollection.call(void 0,l),r);let o=[];if(i){const e={};s.forEach((t=>{const n=t.join(",");e[n]||(e[n]=!0,o.push(t))}))}else o=s;return _helpers.featureCollection.call(void 0,o.map((e=>_helpers.point.call(void 0,e))))}__name(lineIntersect,"lineIntersect");var turf_line_intersect_default=lineIntersect;exports.default=turf_line_intersect_default,exports.lineIntersect=lineIntersect;