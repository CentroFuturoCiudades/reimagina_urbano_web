"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var __defProp=Object.defineProperty,__name=(e,t)=>__defProp(e,"name",{value:t,configurable:!0}),_deepequal=require("deep-equal"),_deepequal2=_interopRequireDefault(_deepequal),_GeojsonEquality=class{constructor(e){var t,r,o;this.direction=!1,this.compareProperties=!0,this.precision=10**-(null!=(t=null==e?void 0:e.precision)?t:17),this.direction=null!=(r=null==e?void 0:e.direction)&&r,this.compareProperties=null==(o=null==e?void 0:e.compareProperties)||o}compare(e,t){if(e.type!==t.type)return!1;if(!sameLength(e,t))return!1;switch(e.type){case"Point":return this.compareCoord(e.coordinates,t.coordinates);case"LineString":return this.compareLine(e.coordinates,t.coordinates);case"Polygon":return this.comparePolygon(e,t);case"GeometryCollection":return this.compareGeometryCollection(e,t);case"Feature":return this.compareFeature(e,t);case"FeatureCollection":return this.compareFeatureCollection(e,t);default:if(e.type.startsWith("Multi")){const r=explode(e),o=explode(t);return r.every((e=>o.some((t=>this.compare(e,t)))))}}return!1}compareCoord(e,t){return e.length===t.length&&e.every(((e,r)=>Math.abs(e-t[r])<this.precision))}compareLine(e,t,r=0,o=!1){if(!sameLength(e,t))return!1;const n=e;let i=t;if(o&&!this.compareCoord(n[0],i[0])){const e=this.fixStartIndex(i,n);if(!e)return!1;i=e}const a=this.compareCoord(n[r],i[r]);return this.direction||a?this.comparePath(n,i):!!this.compareCoord(n[r],i[i.length-(1+r)])&&this.comparePath(n.slice().reverse(),i)}fixStartIndex(e,t){let r,o=-1;for(let n=0;n<e.length;n++)if(this.compareCoord(e[n],t[0])){o=n;break}return o>=0&&(r=[].concat(e.slice(o,e.length),e.slice(1,o+1))),r}comparePath(e,t){return e.every(((e,r)=>this.compareCoord(e,t[r])))}comparePolygon(e,t){if(this.compareLine(e.coordinates[0],t.coordinates[0],1,!0)){const r=e.coordinates.slice(1,e.coordinates.length),o=t.coordinates.slice(1,t.coordinates.length);return r.every((e=>o.some((t=>this.compareLine(e,t,1,!0)))))}return!1}compareGeometryCollection(e,t){return sameLength(e.geometries,t.geometries)&&this.compareBBox(e,t)&&e.geometries.every(((e,r)=>this.compare(e,t.geometries[r])))}compareFeature(e,t){return e.id===t.id&&(!this.compareProperties||_deepequal2.default.call(void 0,e.properties,t.properties))&&this.compareBBox(e,t)&&this.compare(e.geometry,t.geometry)}compareFeatureCollection(e,t){return sameLength(e.features,t.features)&&this.compareBBox(e,t)&&e.features.every(((e,r)=>this.compare(e,t.features[r])))}compareBBox(e,t){return Boolean(!e.bbox&&!t.bbox)||!(!e.bbox||!t.bbox)&&this.compareCoord(e.bbox,t.bbox)}};__name(_GeojsonEquality,"GeojsonEquality");var GeojsonEquality=_GeojsonEquality;function sameLength(e,t){return e.coordinates?e.coordinates.length===t.coordinates.length:e.length===t.length}function explode(e){return e.coordinates.map((t=>({type:e.type.replace("Multi",""),coordinates:t})))}__name(sameLength,"sameLength"),__name(explode,"explode");var earthRadius=6371008.8,factors={centimeters:100*earthRadius,centimetres:100*earthRadius,degrees:360/(2*Math.PI),feet:3.28084*earthRadius,inches:39.37*earthRadius,kilometers:earthRadius/1e3,kilometres:earthRadius/1e3,meters:earthRadius,metres:earthRadius,miles:earthRadius/1609.344,millimeters:1e3*earthRadius,millimetres:1e3*earthRadius,nauticalmiles:earthRadius/1852,radians:1,yards:1.0936*earthRadius},areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,nauticalmiles:2.9155334959812285e-7,millimeters:1e6,millimetres:1e6,yards:1.195990046};function feature(e,t,r={}){const o={type:"Feature"};return(0===r.id||r.id)&&(o.id=r.id),r.bbox&&(o.bbox=r.bbox),o.properties=t||{},o.geometry=e,o}function geometry(e,t,r={}){switch(e){case"Point":return point(t).geometry;case"LineString":return lineString(t).geometry;case"Polygon":return polygon(t).geometry;case"MultiPoint":return multiPoint(t).geometry;case"MultiLineString":return multiLineString(t).geometry;case"MultiPolygon":return multiPolygon(t).geometry;default:throw new Error(e+" is invalid")}}function point(e,t,r={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(e[0])||!isNumber(e[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:e},t,r)}function points(e,t,r={}){return featureCollection(e.map((e=>point(e,t))),r)}function polygon(e,t,r={}){for(const o of e){if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(o[o.length-1].length!==o[0].length)throw new Error("First and last Position are not equivalent.");for(let e=0;e<o[o.length-1].length;e++)if(o[o.length-1][e]!==o[0][e])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:e},t,r)}function polygons(e,t,r={}){return featureCollection(e.map((e=>polygon(e,t))),r)}function lineString(e,t,r={}){if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return feature({type:"LineString",coordinates:e},t,r)}function lineStrings(e,t,r={}){return featureCollection(e.map((e=>lineString(e,t))),r)}function featureCollection(e,t={}){const r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=e,r}function multiLineString(e,t,r={}){return feature({type:"MultiLineString",coordinates:e},t,r)}function multiPoint(e,t,r={}){return feature({type:"MultiPoint",coordinates:e},t,r)}function multiPolygon(e,t,r={}){return feature({type:"MultiPolygon",coordinates:e},t,r)}function geometryCollection(e,t,r={}){return feature({type:"GeometryCollection",geometries:e},t,r)}function round(e,t=0){if(t&&!(t>=0))throw new Error("precision must be a positive number");const r=Math.pow(10,t||0);return Math.round(e*r)/r}function radiansToLength(e,t="kilometers"){const r=factors[t];if(!r)throw new Error(t+" units is invalid");return e*r}function lengthToRadians(e,t="kilometers"){const r=factors[t];if(!r)throw new Error(t+" units is invalid");return e/r}function lengthToDegrees(e,t){return radiansToDegrees(lengthToRadians(e,t))}function bearingToAzimuth(e){let t=e%360;return t<0&&(t+=360),t}function radiansToDegrees(e){return 180*(e%(2*Math.PI))/Math.PI}function degreesToRadians(e){return e%360*Math.PI/180}function convertLength(e,t="kilometers",r="kilometers"){if(!(e>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(e,t),r)}function convertArea(e,t="meters",r="kilometers"){if(!(e>=0))throw new Error("area must be a positive number");const o=areaFactors[t];if(!o)throw new Error("invalid original units");const n=areaFactors[r];if(!n)throw new Error("invalid final units");return e/o*n}function isNumber(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function isObject(e){return null!==e&&"object"===typeof e&&!Array.isArray(e)}function validateBBox(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((e=>{if(!isNumber(e))throw new Error("bbox must only contain numbers")}))}function validateId(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}__name(feature,"feature"),__name(geometry,"geometry"),__name(point,"point"),__name(points,"points"),__name(polygon,"polygon"),__name(polygons,"polygons"),__name(lineString,"lineString"),__name(lineStrings,"lineStrings"),__name(featureCollection,"featureCollection"),__name(multiLineString,"multiLineString"),__name(multiPoint,"multiPoint"),__name(multiPolygon,"multiPolygon"),__name(geometryCollection,"geometryCollection"),__name(round,"round"),__name(radiansToLength,"radiansToLength"),__name(lengthToRadians,"lengthToRadians"),__name(lengthToDegrees,"lengthToDegrees"),__name(bearingToAzimuth,"bearingToAzimuth"),__name(radiansToDegrees,"radiansToDegrees"),__name(degreesToRadians,"degreesToRadians"),__name(convertLength,"convertLength"),__name(convertArea,"convertArea"),__name(isNumber,"isNumber"),__name(isObject,"isObject"),__name(validateBBox,"validateBBox"),__name(validateId,"validateId"),exports.GeojsonEquality=GeojsonEquality,exports.areaFactors=areaFactors,exports.bearingToAzimuth=bearingToAzimuth,exports.convertArea=convertArea,exports.convertLength=convertLength,exports.degreesToRadians=degreesToRadians,exports.earthRadius=earthRadius,exports.factors=factors,exports.feature=feature,exports.featureCollection=featureCollection,exports.geometry=geometry,exports.geometryCollection=geometryCollection,exports.isNumber=isNumber,exports.isObject=isObject,exports.lengthToDegrees=lengthToDegrees,exports.lengthToRadians=lengthToRadians,exports.lineString=lineString,exports.lineStrings=lineStrings,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.point=point,exports.points=points,exports.polygon=polygon,exports.polygons=polygons,exports.radiansToDegrees=radiansToDegrees,exports.radiansToLength=radiansToLength,exports.round=round,exports.validateBBox=validateBBox,exports.validateId=validateId;